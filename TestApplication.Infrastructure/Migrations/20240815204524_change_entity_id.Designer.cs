// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestApplication.Infrastucture;

#nullable disable

namespace TestApplication.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240815204524_change_entity_id")]
    partial class change_entity_id
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TestApplication.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0a84c98-896b-4690-b04f-c5db3dfbe238"),
                            Description = "Свежие фрукты всех видов",
                            Name = "Фрукты"
                        },
                        new
                        {
                            Id = new Guid("8e328186-ebd1-48a7-afe7-8c52a3c59707"),
                            Description = "Разнообразные овощи для вашего стола",
                            Name = "Овощи"
                        },
                        new
                        {
                            Id = new Guid("73c51031-2e4c-4c14-8e3d-d2c10749bc37"),
                            Description = "Молоко, сыр, йогурты и другие молочные изделия",
                            Name = "Молочные продукты"
                        },
                        new
                        {
                            Id = new Guid("f1345d4c-be75-4ab1-bb8c-d8c78026f409"),
                            Description = "Свежие мясные продукты: говядина, свинина, птица",
                            Name = "Мясные изделия"
                        },
                        new
                        {
                            Id = new Guid("32e43954-c09a-43e0-b645-f830b9b7ae80"),
                            Description = "Замороженные овощи, фрукты и готовые блюда",
                            Name = "Замороженные продукты"
                        },
                        new
                        {
                            Id = new Guid("40a6044e-9d25-4c45-864c-e92e323e1749"),
                            Description = "Шоколад, печенье, торты и сладости",
                            Name = "Кондитерские изделия"
                        },
                        new
                        {
                            Id = new Guid("5f275912-661e-4c03-8fa4-dc503f8e7a6d"),
                            Description = "Безалкогольные и алкогольные напитки различных брендов",
                            Name = "Напитки"
                        },
                        new
                        {
                            Id = new Guid("9212d152-8963-4061-918a-76e855726282"),
                            Description = "Крупы, макароны, консервированные продукты",
                            Name = "Бакалея"
                        },
                        new
                        {
                            Id = new Guid("2fdcf39c-8045-4c34-b75b-00ac789f1f32"),
                            Description = "Продукты для вегетарианцев и людей с особыми диетами",
                            Name = "Здоровое питание"
                        },
                        new
                        {
                            Id = new Guid("229683b2-153f-4736-84e0-8959e6f4acbf"),
                            Description = "Товары для дома: моющие средства, упаковка и прочее",
                            Name = "Хозяйственные товары"
                        });
                });

            modelBuilder.Entity("TestApplication.Domain.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("items", (string)null);
                });

            modelBuilder.Entity("TestApplication.Domain.Models.Item", b =>
                {
                    b.HasOne("TestApplication.Domain.Models.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TestApplication.Domain.Models.Category", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
